package Examples;

import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.lang.model.element.Element;
import javax.lang.model.util.Elements;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.text.Document;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class Testing {
	// ***********************************************
	// *** Update or verify the following values. ***
	// **********************************************

	    // Replace the subscriptionKey string value with your valid subscription key.
	    static String subscriptionKey = "enter key here";

	    // Verify the endpoint URI.  At this writing, only one endpoint is used for Bing
	    // search APIs.  In the future, regional endpoints may be available.  If you
	    // encounter unexpected authorization errors, double-check this value against
	    // the endpoint for your Bing Web search instance in your Azure dashboard.
	    static String host = "https://api.cognitive.microsoft.com";
	    static String path = "/bing/v7.0/images/search";

	    static String searchTerm = "puppies";

	    public static SearchResults SearchImages (String searchQuery) throws Exception {
	        // construct URL of search request (endpoint + query string)
	        URL url = new URL(host + path + "?q=" +  URLEncoder.encode(searchQuery, "UTF-8"));
	        HttpsURLConnection connection = (HttpsURLConnection)url.openConnection();
	        connection.setRequestProperty("Ocp-Apim-Subscription-Key", subscriptionKey);

	        // receive JSON body
	        InputStream stream = connection.getInputStream();
	        String response = new Scanner(stream).useDelimiter("\\A").next();

	        // construct result object for return
	        SearchResults results = new SearchResults(new HashMap<String, String>(), response);

	        // extract Bing-related HTTP headers
	        Map<String, List<String>> headers = connection.getHeaderFields();
	        for (String header : headers.keySet()) {
	            if (header == null) continue;      // may have null key
	            if (header.startsWith("BingAPIs-") || header.startsWith("X-MSEdge-")) {
	                results.relevantHeaders.put(header, headers.get(header).get(0));
	            }
	        }

	        stream.close();
	        return results;
	    }

	    // pretty-printer for JSON; uses GSON parser to parse and re-serialize
	    public static String prettify(String json_text) {
	        JsonParser parser = new JsonParser();
	        JsonObject json = parser.parse(json_text).getAsJsonObject();
	        Gson gson = new GsonBuilder().setPrettyPrinting().create();
	        return gson.toJson(json);
	    }

	    public static void main (String[] args) {
	        if (subscriptionKey.length() != 32) {
	            System.out.println("Invalid Bing Search API subscription key!");
	            System.out.println("Please paste yours into the source code.");
	            System.exit(1);
	        }

	        try {
	            System.out.println("Searching the Web for: " + searchTerm);

	            SearchResults result = SearchImages(searchTerm);

	            System.out.println("\nRelevant HTTP Headers:\n");
	            for (String header : result.relevantHeaders.keySet())
	                System.out.println(header + ": " + result.relevantHeaders.get(header));

	            System.out.println("\nJSON Response:\n");
	            System.out.println(prettify(result.jsonResponse));
	        }
	        catch (Exception e) {
	            e.printStackTrace(System.out);
	            System.exit(1);
	        }
	    }
	

}
